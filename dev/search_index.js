var documenterSearchIndex = {"docs":
[{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"EditURL = \"https://github.com/cossio/LocalStore.jl/blob/master/docs/src/literate/io.jl\"","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"using LocalStore","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Define an item type. This should contain enough information to be able to reconstruct the desired object.","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"struct A\n    x::Int\nend","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Since store location is based on hash, it is recommended to define a hash function for custom types.","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Base.hash(a::A, h::UInt) = hash(:A, hash(a.x, h))","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Define how the item is stored on disk. The path is a dir, handled automatically by the LocalStore package.","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"LocalStore.save(a::A, path::String) = open(\"$path/file.txt\", \"w\") do f\n    # some difficult computation you only want to do once\n    x2 = a.x^2\n    # maybe download some remote files\n\n    # now save to disk the results\n    write(f, string(x2))\nend","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Define how the item is read from disk.","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"LocalStore.load(a::A, path::String) = open(\"$path/file.txt\", \"r\") do f\n    parse(Int, readline(f))\nend","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"Automatically checks if the requested object is stored. If not, it creates a local directory and saves it there and loads it. Next time load is called, the stored object is returned.","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"a = LocalStore.load(A(5))","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"","category":"page"},{"location":"literate/io/","page":"Save / load","title":"Save / load","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LocalStore]","category":"page"},{"location":"reference/#LocalStore.clean-Tuple{Any}","page":"Reference","title":"LocalStore.clean","text":"clean(obj)\n\nRemoves the stored data associated with obj.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.clean-Tuple{}","page":"Reference","title":"LocalStore.clean","text":"clean(; force=false)\n\nRemoves all stored data directories.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.expected_tree_hash-Tuple{Any}","page":"Reference","title":"LocalStore.expected_tree_hash","text":"expected_tree_hash(obj)\n\nExpected tree hash for the saved contents of obj. Overload this for specific item types. Otherwise simply returns the hash of the contents of the store (so no verification happens).\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.issaved-Tuple{Any}","page":"Reference","title":"LocalStore.issaved","text":"issaved(obj)\n\nReturns true if obj is locally stored, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.itemdir-Tuple{Any}","page":"Reference","title":"LocalStore.itemdir","text":"itemdir(obj)\n\nDirectory path where obj will be stored.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.load-Tuple{Any}","page":"Reference","title":"LocalStore.load","text":"load(obj)\n\nReads and returns the specified object. Stores it locally if it hasn't been stored already.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.rootdir-Tuple{}","page":"Reference","title":"LocalStore.rootdir","text":"rootdir()\n\nRoot directory path where objects will be stored.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.save-Tuple{Any}","page":"Reference","title":"LocalStore.save","text":"save(obj)\n\nStores obj locally if it has not been stored already. Returns path to directory containing obj.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LocalStore.verify-Tuple{Any}","page":"Reference","title":"LocalStore.verify","text":"verify(obj)\n\nCompares the treehash of the stored copy of obj to the expected treehash, and errors if there is a difference.\n\n\n\n\n\n","category":"method"},{"location":"#LocalStore.jl-Documentation","page":"Home","title":"LocalStore.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package that provides a simple interface for storing and retrieving Julia objects locally.","category":"page"}]
}
